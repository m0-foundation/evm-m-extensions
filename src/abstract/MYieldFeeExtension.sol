// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import {
    AccessControlUpgradeable
} from "../../../lib/common/lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol";

import { IERC20 } from "../../lib/common/src/interfaces/IERC20.sol";

import { ContinuousIndexingMath } from "../../lib/common/src/libs/ContinuousIndexingMath.sol";
import { UIntMath } from "../../lib/common/src/libs/UIntMath.sol";

import { IContinuousIndexing } from "../interfaces/IContinuousIndexing.sol";
import { IMExtension } from "../interfaces/IMExtension.sol";
import { IMTokenLike } from "../interfaces/IMTokenLike.sol";
import { IMYieldFeeExtension } from "../interfaces/IMYieldFeeExtension.sol";

import { IndexingMath } from "../lib/IndexingMath.sol";

import { MExtension } from "./MExtension.sol";

abstract contract MYieldFeeExtensionStorageLayout {
    /// @custom:storage-location erc7201:M0.storage.MYieldFeeExtension
    struct MYieldFeeExtensionStorageStruct {
        // NOTE: Slot 1
        uint256 totalSupply;
        // NOTE: Slot 2
        uint112 totalPrincipal;
        uint128 latestIndex;
        uint16 yieldFeeRate;
        // NOTE: Slot 3
        address yieldFeeRecipient;
        uint40 latestUpdateTimestamp;
        uint32 latestRate;
        // NOTE: Slot 4
        mapping(address account => uint256 balance) balanceOf;
        // NOTE: Slot 5
        mapping(address account => uint112 principal) principalOf;
        // NOTE: Slot 6
        mapping(address account => address claimRecipient) claimRecipients;
    }

    // keccak256(abi.encode(uint256(keccak256("M0.storage.MYieldFeeExtension")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 private constant _M_YIELD_FEE_EXTENSION_STORAGE_LOCATION =
        0xe9a07539918cdd0d6f42b501c9c93a2648c779985ee4e296943c976889219c00;

    function _getMYieldFeeExtensionStorageLocation() internal pure returns (MYieldFeeExtensionStorageStruct storage $) {
        assembly {
            $.slot := _M_YIELD_FEE_EXTENSION_STORAGE_LOCATION
        }
    }
}

/**
 * @title MYieldFeeExtension
 * @notice Upgradeable ERC20 Token contract for wrapping M into a non-rebasing token.
 *         Extended to take a fee from the yield generated by M.
 * @dev    All holders of this ERC20 token are earners.
 * @author M0 Labs
 */
abstract contract MYieldFeeExtension is
    IContinuousIndexing,
    IMYieldFeeExtension,
    AccessControlUpgradeable,
    MYieldFeeExtensionStorageLayout,
    MExtension
{
    /* ============ Variables ============ */

    /// @inheritdoc IMYieldFeeExtension
    uint16 public constant HUNDRED_PERCENT = 10_000;

    /// @inheritdoc IMYieldFeeExtension
    bytes32 public constant YIELD_FEE_MANAGER_ROLE = keccak256("YIELD_FEE_MANAGER_ROLE");

    /// @inheritdoc IMYieldFeeExtension
    bytes32 public constant CLAIM_RECIPIENT_MANAGER_ROLE = keccak256("CLAIM_RECIPIENT_MANAGER_ROLE");

    /* ============ Initializer ============ */

    /**
     * @notice Initializes the genereic M Yield Fee extension token.
     * @param name                  The name of the token (e.g. "M Yield Fee").
     * @param symbol                The symbol of the token (e.g. "MYF").
     * @param mToken                The address of an M Token.
     * @param yieldFeeRate_         The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient_    The address of the recipient of the yield fee.
     * @param admin                 The address administrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager       The address managing the fee rate and recipient.
     * @param claimRecipientManager The address managing claim recipients for accounts.
     */
    function __MYieldFeeExtension_init(
        string memory name,
        string memory symbol,
        address mToken,
        uint16 yieldFeeRate_,
        address yieldFeeRecipient_,
        address admin,
        address yieldFeeManager,
        address claimRecipientManager
    ) internal onlyInitializing {
        if (admin == address(0)) revert ZeroAdmin();
        if (yieldFeeManager == address(0)) revert ZeroYieldFeeManager();
        if (claimRecipientManager == address(0)) revert ZeroClaimRecipientManager();

        __MExtension_init(name, symbol, mToken);

        _grantRole(DEFAULT_ADMIN_ROLE, admin);
        _grantRole(YIELD_FEE_MANAGER_ROLE, yieldFeeManager);
        _grantRole(CLAIM_RECIPIENT_MANAGER_ROLE, claimRecipientManager);

        _setYieldFeeRate(yieldFeeRate_);
        _setYieldFeeRecipient(yieldFeeRecipient_);

        _getMYieldFeeExtensionStorageLocation().latestIndex = ContinuousIndexingMath.EXP_SCALED_ONE;
    }

    /* ============ Interactive Functions ============ */

    /// @inheritdoc IMYieldFeeExtension
    function claimYieldFor(address account) external returns (uint256) {
        if (account == address(0)) revert ZeroAccount();

        uint256 yield_ = accruedYieldOf(account);

        if (yield_ == 0) return 0;

        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        // NOTE: No change in principal, only the balance is updated to include the newly claimed yield.
        unchecked {
            $.balanceOf[account] += yield_;
            $.totalSupply += yield_;
        }

        address claimRecipient_ = claimRecipientFor(account);

        // Emit the appropriate `YieldClaimed` and `Transfer` events, depending on the claim override recipient
        emit YieldClaimed(account, claimRecipient_, yield_);
        emit Transfer(address(0), account, yield_);

        if (claimRecipient_ == account) return yield_;

        _transfer(account, claimRecipient_, yield_);

        return yield_;
    }

    /// @inheritdoc IMYieldFeeExtension
    function claimYieldFee() external returns (uint256) {
        uint256 yieldFee_ = totalAccruedYieldFee();

        if (yieldFee_ == 0) return 0;

        address recipient_ = _getMYieldFeeExtensionStorageLocation().yieldFeeRecipient;

        emit YieldFeeClaimed(msg.sender, recipient_, yieldFee_);

        // NOTE: Round up to allow claiming the whole amount of yield fee.
        _mint(recipient_, yieldFee_, IndexingMath.getPrincipalAmountRoundedUp(yieldFee_, currentIndex()));

        return yieldFee_;
    }

    /// @inheritdoc IMExtension
    function enableEarning() external override {
        if (isEarningEnabled()) revert EarningIsEnabled();

        // NOTE: update the index to store the latest state, current index won't accrue since `latestRate` is 0.
        emit EarningEnabled(updateIndex());

        IMTokenLike(mToken()).startEarning();
    }

    /// @inheritdoc IMExtension
    function disableEarning() external override {
        if (!isEarningEnabled()) revert EarningIsDisabled();

        // NOTE: update the index to store the latest state.
        emit EarningDisabled(updateIndex());

        // NOTE: `latestRate` is set to 0 to indicate that earning is disabled.
        delete _getMYieldFeeExtensionStorageLocation().latestRate;

        IMTokenLike(mToken()).stopEarning(address(this));
    }

    /// @inheritdoc IContinuousIndexing
    function updateIndex() public virtual returns (uint128 currentIndex_) {
        // NOTE: Read the current M token rate adjusted by fee rate split.
        uint32 rate_ = earnerRate();

        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        if ($.latestUpdateTimestamp == block.timestamp && $.latestRate == rate_) return $.latestIndex;

        // NOTE: `currentIndex()` depends on `_latestRate`, so only update it after this.
        $.latestIndex = currentIndex_ = currentIndex();
        $.latestRate = rate_;
        $.latestUpdateTimestamp = _currentBlockTimestamp();

        emit IndexUpdated(currentIndex_, rate_);
    }

    /// @inheritdoc IMYieldFeeExtension
    function setYieldFeeRate(uint16 yieldFeeRate_) external onlyRole(YIELD_FEE_MANAGER_ROLE) {
        _setYieldFeeRate(yieldFeeRate_);

        // NOTE: Update the index to store the new adjusted rate.
        if (isEarningEnabled()) updateIndex();
    }

    /// @inheritdoc IMYieldFeeExtension
    function setYieldFeeRecipient(address yieldFeeRecipient_) external onlyRole(YIELD_FEE_MANAGER_ROLE) {
        // TODO: consider claiming yield fee for the previous recipient
        _setYieldFeeRecipient(yieldFeeRecipient_);
    }

    /// @inheritdoc IMYieldFeeExtension
    function setClaimRecipient(
        address account,
        address claimRecipient
    ) external onlyRole(CLAIM_RECIPIENT_MANAGER_ROLE) {
        if (account == address(0)) revert ZeroAccount();
        if (claimRecipient == address(0)) revert ZeroClaimRecipient();

        // TODO: Consider claiming yield for the previous claim recipient.
        _getMYieldFeeExtensionStorageLocation().claimRecipients[account] = claimRecipient;

        emit ClaimRecipientSet(account, claimRecipient);
    }

    /* ============ External/Public view functions ============ */

    /// @inheritdoc IMYieldFeeExtension
    function accruedYieldOf(address account) public view returns (uint256) {
        return _getAccruedYield(balanceOf(account), principalOf(account), currentIndex());
    }

    /// @inheritdoc IERC20
    function balanceOf(address account) public view override returns (uint256) {
        return _getMYieldFeeExtensionStorageLocation().balanceOf[account];
    }

    /// @inheritdoc IMYieldFeeExtension
    function balanceWithYieldOf(address account) external view returns (uint256) {
        unchecked {
            return balanceOf(account) + accruedYieldOf(account);
        }
    }

    /// @inheritdoc IMYieldFeeExtension
    function principalOf(address account) public view returns (uint112) {
        return _getMYieldFeeExtensionStorageLocation().principalOf[account];
    }

    /// @inheritdoc IContinuousIndexing
    function currentIndex() public view virtual override(IContinuousIndexing, MExtension) returns (uint128) {
        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        if (!isEarningEnabled()) return $.latestIndex;

        // NOTE: Safe to use unchecked here, since `block.timestamp` is always greater than `latestUpdateTimestamp`.
        unchecked {
            return
                // NOTE: Cap the index to `type(uint128).max` to prevent overflow in present value math.
                UIntMath.bound128(
                    ContinuousIndexingMath.multiplyIndicesDown(
                        $.latestIndex,
                        ContinuousIndexingMath.getContinuousIndex(
                            ContinuousIndexingMath.convertFromBasisPoints($.latestRate),
                            uint32(_currentBlockTimestamp() - $.latestUpdateTimestamp)
                        )
                    )
                );
        }
    }

    /// @inheritdoc IMYieldFeeExtension
    function earnerRate() public view virtual returns (uint32) {
        return UIntMath.safe32((uint256(HUNDRED_PERCENT - yieldFeeRate()) * _currentEarnerRate()) / HUNDRED_PERCENT);
    }

    /// @inheritdoc IMExtension
    function isEarningEnabled() public view override returns (bool) {
        return _getMYieldFeeExtensionStorageLocation().latestRate != 0;
    }

    /// @inheritdoc IContinuousIndexing
    function latestIndex() public view returns (uint128) {
        return _getMYieldFeeExtensionStorageLocation().latestIndex;
    }

    /// @inheritdoc IContinuousIndexing
    function latestRate() public view returns (uint32) {
        return _getMYieldFeeExtensionStorageLocation().latestRate;
    }

    /// @inheritdoc IContinuousIndexing
    function latestUpdateTimestamp() public view returns (uint40) {
        return _getMYieldFeeExtensionStorageLocation().latestUpdateTimestamp;
    }

    /// @inheritdoc IMYieldFeeExtension
    function projectedTotalSupply() public view returns (uint256) {
        return
            IndexingMath.getPresentAmountRoundedUp(
                _getMYieldFeeExtensionStorageLocation().totalPrincipal,
                currentIndex()
            );
    }

    /// @inheritdoc IMYieldFeeExtension
    function totalAccruedYield() public view returns (uint256) {
        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();
        return _getAccruedYield($.totalSupply, $.totalPrincipal, currentIndex());
    }

    /// @inheritdoc IMYieldFeeExtension
    function totalAccruedYieldFee() public view returns (uint256) {
        uint256 mBalance_ = IERC20(mToken()).balanceOf(address(this));
        uint256 projectedTotalSupply_ = projectedTotalSupply();

        unchecked {
            return mBalance_ > projectedTotalSupply_ ? mBalance_ - projectedTotalSupply_ : 0;
        }
    }

    /// @inheritdoc IMYieldFeeExtension
    function totalPrincipal() public view returns (uint112) {
        return _getMYieldFeeExtensionStorageLocation().totalPrincipal;
    }

    /// @inheritdoc IERC20
    function totalSupply() public view returns (uint256) {
        return _getMYieldFeeExtensionStorageLocation().totalSupply;
    }

    /// @inheritdoc IMYieldFeeExtension
    function yieldFeeRate() public view returns (uint16) {
        return _getMYieldFeeExtensionStorageLocation().yieldFeeRate;
    }

    /// @inheritdoc IMYieldFeeExtension
    function yieldFeeRecipient() public view returns (address) {
        return _getMYieldFeeExtensionStorageLocation().yieldFeeRecipient;
    }

    /// @inheritdoc IMYieldFeeExtension
    function claimRecipientFor(address account) public view returns (address) {
        address recipient_ = _getMYieldFeeExtensionStorageLocation().claimRecipients[account];

        // If no claim recipient is set, return the account itself.
        return recipient_ == address(0) ? account : recipient_;
    }

    /* ============ Internal Interactive Functions ============ */

    /**
     * @dev   Mints `amount` tokens to `recipient`.
     * @param recipient The address that will receive tokens.
     * @param amount    The amount of tokens to mint.
     */
    function _mint(address recipient, uint256 amount) internal override {
        _mint(recipient, amount, IndexingMath.getPrincipalAmountRoundedDown(amount, currentIndex()));
    }

    /**
     * @dev   Mints `amount` tokens to `recipient` with a specified principal.
     * @param recipient The address that will receive tokens.
     * @param amount    The amount of tokens to mint.
     * @param principal The principal amount to be associated with the minted tokens.
     */
    function _mint(address recipient, uint256 amount, uint112 principal) internal {
        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        // NOTE: Can be `unchecked` because the max amount of  M is never greater than `type(uint240).max`.
        //       Can be `unchecked` because UIntMath.safe112 is used for principal addition safety for `totalPrincipal`
        unchecked {
            $.balanceOf[recipient] += amount;
            $.totalSupply += amount;

            $.totalPrincipal = UIntMath.safe112(uint256($.totalPrincipal) + principal);
            // No need for `UIntMath.safe112`, `principalOf[recipient]` cannot be greater than `totalPrincipal`.
            $.principalOf[recipient] += principal;
        }

        emit Transfer(address(0), recipient, amount);
    }

    /**
     * @dev   Burns `amount` tokens from `account`.
     * @param account The address whose account balance will be decremented.
     * @param amount  The present amount of tokens to burn.
     */
    function _burn(address account, uint256 amount) internal override {
        uint256 balance_ = balanceOf(account);

        _revertIfInsufficientBalance(account, balance_, amount);

        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        // Slightly overestimate the principal amount to be burned and use safe value to avoid underflow in unchecked block
        uint112 fromPrincipal_ = $.principalOf[account];
        uint112 principal_ = IndexingMath.getSafePrincipalAmountRoundedUp(amount, currentIndex(), fromPrincipal_);

        // NOTE: Can be `unchecked` because `_revertIfInsufficientBalance` is used.
        //       Can be `unchecked` because safety adjustment to `principal_` is applied above, and
        //       `principalOf[account]` cannot be greater than `totalPrincipal`.
        unchecked {
            $.balanceOf[account] -= amount;
            $.totalSupply -= amount;

            $.principalOf[account] = fromPrincipal_ - principal_;
            $.totalPrincipal -= principal_;
        }

        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev   Internal ERC20 transfer function that needs to be implemented by the inheriting contract.
     * @param sender    The sender's address.
     * @param recipient The recipient's address.
     * @param amount    The amount to be transferred.
     */
    function _update(address sender, address recipient, uint256 amount) internal override {
        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        // Slightly overestimate the principal amount to be moved on transfer
        uint112 fromPrincipal_ = $.principalOf[sender];
        uint112 principal_ = IndexingMath.getSafePrincipalAmountRoundedUp(amount, currentIndex(), fromPrincipal_);

        // NOTE: Can be `unchecked` because we check for insufficient sender balance above.
        //       Can be `unchecked` because safety adjustment to `principal_` is applied above, and
        unchecked {
            $.balanceOf[sender] -= amount;
            $.balanceOf[recipient] += amount;

            $.principalOf[sender] = fromPrincipal_ - principal_;
            $.principalOf[recipient] += principal_;
        }
    }

    /**
     * @notice Sets the yield fee rate, in bps, that will be taken from the yield generated by M.
     * @dev    Reverts if the yield fee rate is greater than HUNDRED_PERCENT.
     * @dev    Returns early if the yield fee rate is the same as the current one.
     * @param  yieldFeeRate_ The yield fee rate.
     */
    function _setYieldFeeRate(uint16 yieldFeeRate_) internal {
        if (yieldFeeRate_ > HUNDRED_PERCENT) revert YieldFeeRateTooHigh(yieldFeeRate_, HUNDRED_PERCENT);

        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        if ($.yieldFeeRate == yieldFeeRate_) return;

        $.yieldFeeRate = yieldFeeRate_;

        emit YieldFeeRateSet(yieldFeeRate_);
    }

    /**
     * @notice Sets the yield fee recipient that will receive part of the yield generated by M.
     * @dev    Reverts if the yield fee recipient is address zero.
     * @dev    Returns early if the yield fee recipient is the same as the current one.
     * @param  yieldFeeRecipient_ The yield fee recipient address.
     */
    function _setYieldFeeRecipient(address yieldFeeRecipient_) internal {
        if (yieldFeeRecipient_ == address(0)) revert ZeroYieldFeeRecipient();

        MYieldFeeExtensionStorageStruct storage $ = _getMYieldFeeExtensionStorageLocation();

        if ($.yieldFeeRecipient == yieldFeeRecipient_) return;

        $.yieldFeeRecipient = yieldFeeRecipient_;

        emit YieldFeeRecipientSet(yieldFeeRecipient_);
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Returns the current block timestamp.
     *         Needs to be overridden by the inheriting contract.
     *         MUST return the current block timestamp for an M extension token deployed on the mainnet.
     *         MUST return spoke M token's `latestUpdateTimestamp` for an M extension token deployed on a spoke chain.
     * @return The current block timestamp.
     */
    function _currentBlockTimestamp() internal view virtual returns (uint40) {}

    /**
     * @dev    Returns the current earner rate.
     *         Needs to be overridden by the inheriting contract.
     *         MUST return M token's earner rate for an M extension token deployed on the mainnet.
     *         MUST return a rate oracle's earner rate for an M extension token deployed on a spoke chain.
     * @return The current earner rate.
     */
    function _currentEarnerRate() internal view virtual returns (uint32) {}

    /**
     * @dev    Compute the yield given a balance, principal and index.
     * @param  balance   The current balance of the account.
     * @param  principal The principal of the account.
     * @param  index     The current index.
     * @return The yield accrued since the last claim.
     */
    function _getAccruedYield(uint256 balance, uint112 principal, uint128 index) internal pure returns (uint256) {
        uint256 balanceWithYield_ = IndexingMath.getPresentAmountRoundedDown(principal, index);
        unchecked {
            return balanceWithYield_ > balance ? balanceWithYield_ - balance : 0;
        }
    }
}
