// SPDX-License-Identifier: BUSL-1.1

pragma solidity ^0.8.26;

import { IndexingMath } from "../../lib/common/src/libs/IndexingMath.sol";

import { AccessControl } from "../../lib/openzeppelin-contracts/contracts/access/AccessControl.sol";

import { IMTokenLike } from "../interfaces/IMTokenLike.sol";
import { IYieldFeeComponent } from "../interfaces/IYieldFeeComponent.sol";
/**
 * @title  Component which allows a fee manager to set a fee taken from the yield generated by M.
 * @author M^0 Labs
 */
abstract contract YieldFeeComponent is AccessControl, IYieldFeeComponent {
    /* ============ Variables ============ */

    /// @inheritdoc IYieldFeeComponent
    uint16 public constant HUNDRED_PERCENT = 10_000;

    /// @dev The role that can manage the yield fee rate and recipient.
    bytes32 internal constant _YIELD_FEE_MANAGER_ROLE = keccak256("YIELD_FEE_MANAGER_ROLE");

    /// @inheritdoc IYieldFeeComponent
    uint16 public yieldFeeRate;

    /// @inheritdoc IYieldFeeComponent
    address public yieldFeeRecipient;

    /// @dev Mapping of accrued yield fees for each recipient.
    mapping(address yieldFeeRecipient => uint256 yield) internal _accruedYieldFee;

    /* ============ Constructor ============ */

    /**
     * @dev   Constructs the M Yield Fee contract.
     * @param yieldFeeRate_      The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient_ The address of the recipient of the yield fee.
     * @param admin_             The address admnistrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager_   The address managing the fee rate and recipient.
     */
    constructor(uint16 yieldFeeRate_, address yieldFeeRecipient_, address admin_, address yieldFeeManager_) {
        if (admin_ == address(0)) revert ZeroAdmin();
        if (yieldFeeManager_ == address(0)) revert ZeroYieldFeeManager();

        _grantRole(DEFAULT_ADMIN_ROLE, admin_);
        _grantRole(_YIELD_FEE_MANAGER_ROLE, yieldFeeManager_);

        _setYieldFeeRate(yieldFeeRate_);
        _setYieldFeeRecipient(yieldFeeRecipient_);
    }

    /* ============ Interactive Functions ============ */

    /// @inheritdoc IYieldFeeComponent
    function setYieldFeeRate(uint16 yieldFeeRate_) external onlyRole(_YIELD_FEE_MANAGER_ROLE) {
        _setYieldFeeRate(yieldFeeRate_);
    }

    /// @inheritdoc IYieldFeeComponent
    function setYieldFeeRecipient(address yieldFeeRecipient_) external onlyRole(_YIELD_FEE_MANAGER_ROLE) {
        _setYieldFeeRecipient(yieldFeeRecipient_);
    }

    /* ============ View/Pure Functions ============ */

    /// @inheritdoc IYieldFeeComponent
    function accruedYieldFeeOf(address account_) external view returns (uint256) {
        return _getAccruedYieldFee(account_);
    }

    /* ============ Internal Interactive Functions ============ */

    /**
     * @notice Sets the yield fee rate, in bps, that will be taken from the yield generated by M.
     * @dev    Reverts if the yield fee rate is greater than MAX_FEE_RATE.
     * @dev    Returns early if the yield fee rate is the same as the current one.
     * @param  yieldFeeRate_ The yield fee rate.
     */
    function _setYieldFeeRate(uint16 yieldFeeRate_) internal {
        if (yieldFeeRate_ > HUNDRED_PERCENT) revert YieldFeeRateTooHigh(yieldFeeRate_, HUNDRED_PERCENT);
        if (yieldFeeRate == yieldFeeRate_) return;

        yieldFeeRate = yieldFeeRate_;

        emit YieldFeeRateSet(yieldFeeRate_);
    }

    /**
     * @notice Sets the yield fee recipient that will receive part of the yield generated by M.
     * @dev    Reverts if the yield fee recipient is address zero.
     * @dev    Returns early if the yield fee recipient is the same as the current one.
     * @param  yieldFeeRecipient_ The yield fee recipient address.
     */
    function _setYieldFeeRecipient(address yieldFeeRecipient_) internal {
        if (yieldFeeRecipient_ == address(0)) revert ZeroYieldFeeRecipient();
        if (yieldFeeRecipient == yieldFeeRecipient_) return;

        yieldFeeRecipient = yieldFeeRecipient_;

        emit YieldFeeRecipientSet(yieldFeeRecipient_);
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Compute the yield given an account's balance, earning principal, and the current index.
     * @param  principal_ The earning principal of the account.
     * @param  currentIndex_ The current index.
     * @return yield_        The yield accrued since the last interaction.
     * @return yieldFee_     The yield fee accrued since the last interaction.
     */
    function _getAccruedYield(
        uint240 balance_,
        uint112 principal_,
        uint128 currentIndex_
    ) internal view returns (uint240 yield_, uint240 yieldFee_) {
        uint240 balanceWithYield_ = IndexingMath.getPresentAmountRoundedDown(principal_, currentIndex_);

        unchecked {
            yield_ = (balanceWithYield_ <= balance_) ? 0 : balanceWithYield_ - balance_;
        }

        if (yield_ == 0) return (yield_, yieldFee_);

        uint16 yieldFeeRate_ = yieldFeeRate;

        if (yieldFeeRate_ != 0) {
            unchecked {
                yieldFee_ = (yield_ * yieldFeeRate_) / HUNDRED_PERCENT;
                yield_ -= yieldFee_;
            }
        }
    }

    /**
     * @notice Returns the accrued yield fee for a given account.
     * @param  account The address of the account.
     * @return The accrued yield fee for the account.
     */
    function _getAccruedYieldFee(address account) internal view returns (uint256) {
        return _accruedYieldFee[account];
    }
}
