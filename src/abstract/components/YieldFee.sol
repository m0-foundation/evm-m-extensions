// SPDX-License-Identifier: BUSL-1.1

pragma solidity ^0.8.26;
import { console } from "../../../../lib/forge-std/src/console.sol";
import { IndexingMath } from "../../../lib/common/src/libs/IndexingMath.sol";

import { AccessControl } from "../../../lib/openzeppelin-contracts/contracts/access/AccessControl.sol";

import { IYieldFee } from "../../interfaces/IYieldFee.sol";

/**
 * @title  Component which allows a fee manager to set a fee taken from the yield generated by M.
 * @author M^0 Labs
 */
abstract contract YieldFee is AccessControl, IYieldFee {
    /* ============ Variables ============ */

    /// @inheritdoc IYieldFee
    uint16 public constant HUNDRED_PERCENT = 10_000;

    /// @dev The role that can manage the yield fee rate and recipient.
    bytes32 internal constant _YIELD_FEE_MANAGER_ROLE = keccak256("YIELD_FEE_MANAGER_ROLE");

    /// @inheritdoc IYieldFee
    uint16 public yieldFeeRate;

    /// @inheritdoc IYieldFee
    address public yieldFeeRecipient;

    /* ============ Constructor ============ */

    /**
     * @dev   Constructs the M Yield Fee contract.
     * @param yieldFeeRate_      The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient_ The address of the recipient of the yield fee.
     * @param admin_             The address admnistrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager_   The address managing the fee rate and recipient.
     */
    constructor(uint16 yieldFeeRate_, address yieldFeeRecipient_, address admin_, address yieldFeeManager_) {
        if (admin_ == address(0)) revert ZeroAdmin();
        if (yieldFeeManager_ == address(0)) revert ZeroYieldFeeManager();

        _grantRole(DEFAULT_ADMIN_ROLE, admin_);
        _grantRole(_YIELD_FEE_MANAGER_ROLE, yieldFeeManager_);

        _setYieldFeeRate(yieldFeeRate_);
        _setYieldFeeRecipient(yieldFeeRecipient_);
    }

    /* ============ Interactive Functions ============ */

    /// @inheritdoc IYieldFee
    function setYieldFeeRate(uint16 yieldFeeRate_) external onlyRole(_YIELD_FEE_MANAGER_ROLE) {
        _setYieldFeeRate(yieldFeeRate_);
    }

    /// @inheritdoc IYieldFee
    function setYieldFeeRecipient(address yieldFeeRecipient_) external onlyRole(_YIELD_FEE_MANAGER_ROLE) {
        _setYieldFeeRecipient(yieldFeeRecipient_);
    }

    /* ============ Internal Interactive Functions ============ */

    /**
     * @notice Sets the yield fee rate, in bps, that will be taken from the yield generated by M.
     * @dev    Reverts if the yield fee rate is greater than HUNDRED_PERCENT.
     * @dev    Returns early if the yield fee rate is the same as the current one.
     * @param  yieldFeeRate_ The yield fee rate.
     */
    function _setYieldFeeRate(uint16 yieldFeeRate_) internal {
        if (yieldFeeRate_ > HUNDRED_PERCENT) revert YieldFeeRateTooHigh(yieldFeeRate_, HUNDRED_PERCENT);
        if (yieldFeeRate == yieldFeeRate_) return;

        yieldFeeRate = yieldFeeRate_;

        emit YieldFeeRateSet(yieldFeeRate_);
    }

    /**
     * @notice Sets the yield fee recipient that will receive part of the yield generated by M.
     * @dev    Reverts if the yield fee recipient is address zero.
     * @dev    Returns early if the yield fee recipient is the same as the current one.
     * @param  yieldFeeRecipient_ The yield fee recipient address.
     */
    function _setYieldFeeRecipient(address yieldFeeRecipient_) internal {
        if (yieldFeeRecipient_ == address(0)) revert ZeroYieldFeeRecipient();
        if (yieldFeeRecipient == yieldFeeRecipient_) return;

        yieldFeeRecipient = yieldFeeRecipient_;

        emit YieldFeeRecipientSet(yieldFeeRecipient_);
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Compute the yield given an account's balance, earning principal and the difference in claim indices.
     * @param  principal_      The earning principal of the account.
     * @param  yieldIndex_     The current yield index.
     * @param  lastClaimIndex_ The yield index at which yield was last claimed.
     * @return yield_          The yield accrued since the last claim.
     */
    function _getAccruedYield(
        uint240 balance_,
        uint112 principal_,
        uint128 yieldIndex_,
        uint128 lastClaimIndex_
    ) internal view returns (uint240) {
        // If account's lastClaimIndex is 0, it means the account has not been initialized and there is not yield to claim.
        if (lastClaimIndex_ == 0) return 0;

        uint128 index_;

        unchecked {
            index_ = yieldIndex_ > lastClaimIndex_ ? yieldIndex_ - lastClaimIndex_ : 0;
        }

        console.log("yieldIndex_, %s", yieldIndex_);
        console.log("lastClaimIndex_, %s", lastClaimIndex_);
        console.log("index_ %s", index_);

        // If no difference in indices, no yield had time to accrue.
        if (index_ == 0) return 0;

        // The accrued yield is computed by multiplying the principal by the difference in indices.
        return IndexingMath.getPresentAmountRoundedDown(principal_, index_);
    }
}
