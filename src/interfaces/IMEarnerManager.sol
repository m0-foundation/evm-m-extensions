// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

/**
 * @title M Extension where Earner Manager whitelists earners and sets fee rates for them.
 * @author M0 Labs
 */
interface IMEarnerManager {
    /* ============ Events ============ */

    /**
     * @notice Emitted when an account's yield is claimed.
     * @param  account   The address that yield is claimed for.
     * @param  yield     The amount of M extension yield claimed.
     */
    event YieldClaimed(address indexed account, uint256 yield);

    /**
     * @notice Emitted when an account's yield fee is claimed.
     * @param  account      The address that yield fee is claimed for.
     * @param  feeRecipient The address of the fee recipient.
     * @param  fee          The amount of M extension yield fee claimed.
     */
    event FeeClaimed(address indexed account, address indexed feeRecipient, uint256 fee);

    /**
     * @notice Emitted when account is added/removed to/from  the whitelist or fee rate is adjusted
     * @param  account   The address to set earner status and details.
     * @param  status    The whitelisted status of account.
     * @param  feeRate   The fee rate in bps of the account.
     */
    event AccountInfoSet(address indexed account, bool status, uint16 feeRate);

    /**
     * @notice Emitted when the yield recipient is set.
     * @param  newRecipient The address of the new yield recipient.
     */
    event FeeRecipientSet(address indexed newRecipient);

    /* ============ Custom Errors ============ */

    /// @notice Emitted in constructor if fee recipient is 0x0.
    error ZeroFeeRecipient();

    /// @notice Emitted in constructor if earner manager is 0x0.
    error ZeroEarnerManager();

    /// @notice Emitted in constructor if default admin is 0x0.
    error ZeroAdmin();

    /// @notice Emitted if account is 0x0.
    error ZeroAccount();

    /// @notice Emitted if the fee rate provided exceeds 100% in bps.
    error InvalidFeeRate();

    /// @notice Emitted if the account is not whitelisted.
    error NotWhitelisted(address account);

    /// @notice Emitted in `setAccountInfo` if lengths of arrays mismatch.
    error ArrayLengthMismatch();

    /// @notice Emitted in `setAccountInfo` if the array is empty.
    error ArrayLengthZero();

    /* ============ Interactive Functions ============ */

    /**
     * @notice Claims accrued yield to the account and % in fees to fee recipient.
     * @param  account The address of the account to claim yield for.
     * @return yieldWithFee The total amount of M extension yield claimed for the account.
     * @return fee The amount of M extension yield fee sent to fee recipient.
     * @return yieldNetOfFee The amount of M extension yield net of fees.
     */
    function claimFor(address account) external returns (uint256, uint256, uint256);

    /**
     * @notice Sets the account info like:
     *         - whitelisting or removing account from whitelist,
     *         - fee rate for the account.
     * @dev    MUST only be callable by the EARNER_MANAGER_ROLE.
     * @dev    SHOULD revert if account is 0x0.
     * @param  account The address of the account to whitelist for earning.
     * @param  status  Whether the account is whitelisted as an earner.
     * @param  feeRate The fee rate, in bps, that will be taken from the yield generated by the account.
     */
    function setAccountInfo(address account, bool status, uint16 feeRate) external;

    /**
     * @notice Sets the account info like:
     *         - whitelisting or removing account from whitelist,
     *         - fee rate for the account.
     * @dev    MUST only be callable by the EARNER_MANAGER_ROLE.
     * @dev    SHOULD revert if account is 0x0.
     * @param  accounts The addresses of the accounts to whitelist for earning or remove from the whitelist.
     * @param  statuses Whether each account is a whitelisted, respectively, according to the admin.
     * @param  feeRates The fee rate, in bps, that will be taken from the yield generated by the accounts.
     */
    function setAccountInfo(address[] calldata accounts, bool[] calldata statuses, uint16[] calldata feeRates) external;

    /**
     * @notice Sets the yield fee recipient.
     * @dev    MUST only be callable by the EARNER_MANAGER_ROLE.
     * @dev    SHOULD revert if account is 0x0.
     * @dev    SHOULD return early if the account is already the fee recipient.
     * @param  account The address of the new yield fee recipient.
     */
    function setFeeRecipient(address account) external;

    /* ============ View/Pure Functions ============ */

    /// @notice Returns total accrued yield, fee and yield net of fee for `account`.
    function accruedYieldAndFeeOf(address account) external view returns (uint256, uint256, uint256);

    /// @notice Returns yield net of fee for `account`.
    function accruedYieldOf(address account) external view returns (uint256);

    /// @notice Returns fee accrued as a part of yield for `account`.
    function accruedFeeOf(address account) external view returns (uint256);

    /// @notice Returns balance with yield net of fee for `account`.
    function balanceWithYieldOf(address account) external view returns (uint256);

    /// @notice Returns the fee rate in basis points for `account` - [0..100%]
    function feeRateOf(address account) external view returns (uint16);

    /// @notice Returns the principal accruing yield for `account`.
    function principalOf(address account) external view returns (uint112);

    /// @notice Returns whether `account` is whitelisted for earning yield and be whitelisted holder of M extension token.
    function isWhitelisted(address account) external view returns (bool);

    /// @notice The address of the yield fee recipient for all whitelisted accounts.
    function feeRecipient() external view returns (address);

    /// @notice The projected total supply if all accrued yield was claimed at this moment.
    function projectedTotalSupply() external view returns (uint256);

    /// @notice The total amount of principal of all whitelisted accounts.
    function totalPrincipal() external view returns (uint112);

    /// @notice 100% in basis points.
    function ONE_HUNDRED_PERCENT() external view returns (uint16);

    /// @notice The role that can manage the yield recipient.
    function EARNER_MANAGER_ROLE() external view returns (bytes32);
}
