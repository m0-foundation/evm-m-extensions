// SPDX-License-Identifier: BUSL-1.1

pragma solidity ^0.8.26;

/**
 * @title  Interface for the Yield Fee component abstract contract.
 * @author M^0 Labs
 */
interface IYieldFee {
    /* ============ Events ============ */

    /**
     * @notice Emitted when the fee rate is set.
     * @param  feeRate The fee rate in bps.
     */
    event YieldFeeRateSet(uint16 feeRate);

    /**
     * @notice Emitted when the yield fee recipient address is set.
     * @param  yieldFeeRecipient The yield fee recipient address.
     */
    event YieldFeeRecipientSet(address indexed yieldFeeRecipient);

    /* ============ Custom Errors ============ */

    /**
     * @notice Emitted when the yield fee rate provided exceeds the max yield fee rate.
     * @param  yieldFeeRate The yield fee rate provided.
     * @param  maxYieldFeeRate The max yield fee rate settable.
     */
    error YieldFeeRateTooHigh(uint16 yieldFeeRate, uint16 maxYieldFeeRate);

    /// @notice Emitted in constructor if the admin is 0x0.
    error ZeroAdmin();

    /// @notice Emitted in constructor if the yield fee manager is 0x0.
    error ZeroYieldFeeManager();

    /// @notice Emitted if the yield fee recipient is 0x0.
    error ZeroYieldFeeRecipient();

    /* ============ Interactive Functions ============ */

    /**
     * @notice Sets the yield fee rate, in bps, that will be taken from the yield generated by M.
     * @dev    MUST only be callable by the yield fee manager.
     * @dev    MUST revert if the fee rate is greater than MAX_FEE_RATE.
     * @param  rate The yield fee rate in bps.
     */
    function setYieldFeeRate(uint16 rate) external;

    /**
     * @notice Sets the yield fee recipient that will receive part of the yield generated by M.
     * @dev    MUST only be callable by the yield fee manager.
     * @dev    MUST revert if the yield fee recipient is address zero.
     * @param  recipient The yield fee recipient address.
     */
    function setYieldFeeRecipient(address recipient) external;

    /* ============ View/Pure Functions ============ */

    /// @notice Returns 100% in basis points.
    function HUNDRED_PERCENT() external returns (uint16);

    /**
     * @notice Returns the accrued yield fee for a given account.
     * @param  account The address of the account.
     * @return The accrued yield fee for the account.
     */
    function accruedYieldFeeOf(address account) external returns (uint256);

    /// @notice Returns the yield fee rate, in bps, that is taken from the yield generated by M.
    function yieldFeeRate() external returns (uint16);

    /// @notice Returns the current yield fee recipient that receives part of the yield generated by M.
    function yieldFeeRecipient() external returns (address);
}
