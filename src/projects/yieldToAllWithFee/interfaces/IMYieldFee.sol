// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

/**
 * @title  Interface for M Yield Fee.
 * @author M0 Labs
 */
interface IMYieldFee {
    /* ============ Events ============ */

    /**
     * @notice Emitted when an account's yield is claimed.
     * @param  claimer   The address that claimed the yield fee.
     * @param  recipient The address of the recipient.
     * @param  yield     The amount of M yield claimed.
     */
    event YieldClaimed(address indexed claimer, address indexed recipient, uint256 yield);

    /**
     * @notice Emitted when the yield fee is claimed.
     * @param  claimer   The address that claimed the yield fee.
     * @param  recipient The address of the recipient.
     * @param  fee  The amount of yield fee claimed.
     */
    event FeeClaimed(address indexed claimer, address indexed recipient, uint256 fee);

    /**
     * @notice Emitted when the fee rate is set.
     * @param  feeRate The fee rate in bps.
     */
    event FeeRateSet(uint16 feeRate);

    /**
     * @notice Emitted when the yield fee recipient address is set.
     * @param  feeRecipient The yield fee recipient address.
     */
    event FeeRecipientSet(address indexed feeRecipient);

    /**
     * @notice Emitted when the claim recipient is set.
     * @param account The address of the account that accrued yield.
     * @param claimRecipient The address of the claim recipient.
     */
    event ClaimRecipientSet(address indexed account, address indexed claimRecipient);

    /* ============ Custom Errors ============ */

    /**
     * @notice Emitted when the yield fee rate provided exceeds the max yield fee rate.
     * @param  feeRate The yield fee rate provided.
     * @param  maxFeeRate The max yield fee rate settable.
     */
    error FeeRateTooHigh(uint16 feeRate, uint16 maxFeeRate);

    /// @notice Emitted in constructor if the admin is 0x0.
    error ZeroAdmin();

    /// @notice Emitted in constructor if the yield fee manager is 0x0.
    error ZeroFeeManager();

    /// @notice Emitted in constructor if the claim recipient manager is 0x0.
    error ZeroClaimRecipientManager();

    /// @notice Emitted if the yield fee recipient is 0x0.
    error ZeroFeeRecipient();

    /// @notice Emitted if the claim recipient is 0x0.
    error ZeroClaimRecipient();

    /// @notice Emitted if the account is 0x0.
    error ZeroAccount();

    /* ============ Interactive Functions ============ */

    /**
     * @notice Claims `account`'s accrued yield.
     * @dev    Can be used to claim yield on behalf of `account`.
     * @param  account The address of the account.
     */
    function claimYieldFor(address account) external returns (uint256);

    /**
     * @notice Claims current accrued yield fee.
     * @dev    Can be used to claim yield fee on behalf of the `feeRecipient`.
     * @dev    SHOULD return early if the claimable yield fee is zero.
     * @return The amount of yield fee claimed.
     */
    function claimFee() external returns (uint256);

    /**
     * @notice Sets the yield fee rate, in bps, that will be taken from the yield generated by M.
     * @dev    MUST only be callable by the yield fee manager.
     * @dev    MUST revert if the fee rate is greater than MAX_FEE_RATE.
     * @param  feeRate The yield fee rate in bps.
     */
    function setFeeRate(uint16 feeRate) external;

    /**
     * @notice Sets the yield fee recipient that will receive part of the yield generated by M.
     * @dev    MUST only be callable by the yield fee manager.
     * @dev    MUST revert if the yield fee recipient is address zero.
     * @param  feeRecipient The yield fee recipient address.
     */
    function setFeeRecipient(address feeRecipient) external;

    /**
     * @notice Sets the claim recipient that will receive the yield fee.
     * @dev    MUST only be callable by the claim recipient manager.
     * @dev    MUST revert if the claim recipient is address zero.
     * @param  account The address that accrued yield.
     * @param  claimRecipient The claim recipient address.
     */
    function setClaimRecipient(address account, address claimRecipient) external;

    /* ============ View/Pure Functions ============ */

    /// @notice Returns 100% in basis points.
    function ONE_HUNDRED_PERCENT() external pure returns (uint16);

    /// @notice Returns the yield fee manager role hash.
    function FEE_MANAGER_ROLE() external pure returns (bytes32);

    /// @notice Returns the claim recipient manager role hash.
    function CLAIM_RECIPIENT_MANAGER_ROLE() external pure returns (bytes32);

    /**
     * @notice Returns the yield accrued for `account`, which is claimable.
     * @param  account The account being queried.
     * @return The amount of yield that is claimable.
     */
    function accruedYieldOf(address account) external view returns (uint256);

    /// @notice Returns the current value of the earner rate in basis points.
    function earnerRate() external view returns (uint32);

    /**
     * @notice Returns the token balance of `account` including any accrued yield.
     * @param  account The address of some account.
     * @return The token balance of `account` including any accrued yield.
     */
    function balanceWithYieldOf(address account) external view returns (uint256);

    /**
     * @notice Returns the principal of `account`.
     * @param  account The address of some account.
     * @return The principal of `account`.
     */
    function principalOf(address account) external view returns (uint112);

    /// @notice The projected total supply if all accrued yield was claimed at this moment.
    function projectedTotalSupply() external view returns (uint256);

    /// @notice The current total accrued yield claimable by holders.
    function totalAccruedYield() external view returns (uint256);

    /// @notice The current total accrued yield fee claimable by the yield fee recipient.
    function totalAccruedFee() external view returns (uint256);

    /// @notice The total principal to help compute `totalAccruedYield()` and yield fee.
    function totalPrincipal() external view returns (uint112);

    /// @notice Returns the yield fee rate, in bps, that is taken from the yield generated by M.
    function feeRate() external view returns (uint16);

    /// @notice Returns the current yield fee recipient that receives part of the yield generated by M.
    function feeRecipient() external view returns (address);

    /**
     * @notice Returns the claim recipient for the given account.
     * @dev    The claim recipient is the address set for claim recipient manager or account itself.
     * @param  account The address of the account.
     * @return The claim recipient address for the account.
     */
    function claimRecipientFor(address account) external view returns (address);
}
