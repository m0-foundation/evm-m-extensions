// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import { MYieldFee } from "./MYieldFee.sol";

import { IContinuousIndexing } from "./interfaces/IContinuousIndexing.sol";
import { IRateOracle } from "./interfaces/IRateOracle.sol";
import { IMSpokeYieldFee } from "./interfaces/IMSpokeYieldFee.sol";

abstract contract MSpokeYieldFeeStorageLayout {
    /// @custom:storage-location erc7201:M0.storage.SpokeMYieldFee
    struct MSpokeYieldFeeStorageStruct {
        address rateOracle;
    }

    // keccak256(abi.encode(uint256(keccak256("M0.storage.MSpokeYieldFee")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 private constant _M_SPOKE_YIELD_FEE_STORAGE_LOCATION =
        0x2aa34bda88d9a6fad4859c438b6b00a9fe5d9d80a401ed1357a646e247972000;

    function _getMSpokeYieldFeeStorageLocation() internal pure returns (MSpokeYieldFeeStorageStruct storage $) {
        assembly {
            $.slot := _M_SPOKE_YIELD_FEE_STORAGE_LOCATION
        }
    }
}

/**
 * @title  SpokeMYieldFee
 * @notice Upgradeable ERC20 Token contract for wrapping M into a non-rebasing token.
 *         Extended to take a fee from the yield generated by M.
 * @dev    All holders of this ERC20 token are earners.
 * @dev    This M extension must only be deployed on Spoke chains.
 *         Check MYieldFee for the Mainnet version.
 * @author M0 Labs
 */
contract MSpokeYieldFee is IMSpokeYieldFee, MSpokeYieldFeeStorageLayout, MYieldFee {
    /* ============ Initializer ============ */

    /**
     * @dev   Initializes the Spoke M Yield Fee token.
     * @param initParams  The parameters to initialize the M Yield Fee token.
     * @param rateOracle_ The address of a rate oracle.
     */
    function initialize(MYieldFeeInitParams memory initParams, address rateOracle_) public virtual initializer {
        if (rateOracle_ == address(0)) revert ZeroRateOracle();
        _getMSpokeYieldFeeStorageLocation().rateOracle = rateOracle_;

        __MYieldFee_initViaStruct(initParams);
    }

    /* ============ View/Pure Functions ============ */

    /// @inheritdoc IMSpokeYieldFee
    function rateOracle() public view returns (address) {
        return _getMSpokeYieldFeeStorageLocation().rateOracle;
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Returns the timestamp when the earner rate was last accrued to accounts.
     * @dev    Uses `latestUpdateTimestamp` from Spoke M to cap `currentIndex` to the timestamp
     *         when Spoke M's index was last updated and thus avoid overprinting M extension tokens.
     * @return The current block timestamp.
     */
    function _latestEarnerRateAccrualTimestamp() internal view override returns (uint40) {
        return IContinuousIndexing(mToken()).latestUpdateTimestamp();
    }

    /// @dev Returns the current earner rate.
    function _currentEarnerRate() internal view override returns (uint32) {
        // NOTE: The behavior of Rate Oracle is known, so we can safely retrieve the earner rate.
        return IRateOracle(rateOracle()).earnerRate();
    }
}
