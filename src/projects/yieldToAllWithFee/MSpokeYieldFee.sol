// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import { MYieldFee } from "./MYieldFee.sol";

import { IContinuousIndexing } from "./interfaces/IContinuousIndexing.sol";
import { IRateOracle } from "./interfaces/IRateOracle.sol";
import { IMSpokeYieldFee } from "./interfaces/IMSpokeYieldFee.sol";

/**
 * @title  SpokeMYieldFee
 * @notice Upgradeable ERC20 Token contract for wrapping M into a non-rebasing token.
 *         Extended to take a fee from the yield generated by M.
 * @dev    All holders of this ERC20 token are earners.
 * @dev    This M extension must only be deployed on Spoke chains.
 *         Check MYieldFee for the Mainnet version.
 * @author M0 Labs
 */
contract MSpokeYieldFee is IMSpokeYieldFee, MYieldFee {
    /* ============ Variables ============ */

    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable
    /// @inheritdoc IMSpokeYieldFee
    address public immutable rateOracle;

    /* ============ Constructor ============ */

    /**
     * @custom:oz-upgrades-unsafe-allow constructor
     * @notice Constructs MYieldFee Implementation contract
     * @dev    Sets immutable storage.
     * @param  mToken       The address of $M token.
     * @param  swapFacility The address of Swap Facility.
     * @param  rateOracle_  The address of a rate oracle.
     */
    constructor(address mToken, address swapFacility, address rateOracle_) MYieldFee(mToken, swapFacility) {
        if ((rateOracle = rateOracle_) == address(0)) revert ZeroRateOracle();
    }

    /* ============ Initializer ============ */

    /**
     * @dev   Initializes the Spoke M Yield Fee token.
     * @param name                  The name of the token (e.g. "M Yield Fee").
     * @param symbol                The symbol of the token (e.g. "MYF").
     * @param feeRate               The fee rate, in bps, that will be taken from the yield generated by M.
     * @param feeRecipient          The address of the recipient of the yield fee.
     * @param admin                 The address administrating the M extension. Can grant and revoke roles.
     * @param feeManager            The address managing the fee rate and recipient.
     * @param claimRecipientManager The address managing claim recipients for accounts.

     */
    function initialize(
        string memory name,
        string memory symbol,
        uint16 feeRate,
        address feeRecipient,
        address admin,
        address feeManager,
        address claimRecipientManager
    ) public virtual override initializer {
        super.initialize(name, symbol, feeRate, feeRecipient, admin, feeManager, claimRecipientManager);
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Returns the timestamp when the earner rate was last accrued to accounts.
     * @dev    Uses `latestUpdateTimestamp` from Spoke M to cap `currentIndex` to the timestamp
     *         when Spoke M's index was last updated and thus avoid overprinting M extension tokens.
     * @return The current block timestamp.
     */
    function _latestEarnerRateAccrualTimestamp() internal view override returns (uint40) {
        return IContinuousIndexing(mToken).latestUpdateTimestamp();
    }

    /// @dev Returns the current earner rate.
    function _currentEarnerRate() internal view override returns (uint32) {
        // NOTE: The behavior of Rate Oracle is known, so we can safely retrieve the earner rate.
        return IRateOracle(rateOracle).earnerRate();
    }
}
