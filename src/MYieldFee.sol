// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import { MYieldFeeExtension } from "./abstract/MYieldFeeExtension.sol";

import { IMTokenLike } from "./interfaces/IMTokenLike.sol";

/**
 * @title   MYieldFee
 * @notice  Upgradeable ERC20 Token contract for wrapping M into a non-rebasing token.
 *          Extended to take a fee from the yield generated by M.
 * @dev     All holders of this ERC20 token are earners.
 * @dev     This M extension must only be deployed on Mainnet.
 *          Check SpokeMYieldFee for the Spoke version.
 * @author  M0 Labs
 */
contract MYieldFee is MYieldFeeExtension {
    /* ============ Initializer ============ */

    /**
     * @dev   Initializes the M Yield Fee token.
     * @param name                  The name of the token (e.g. "M Yield Fee").
     * @param symbol                The symbol of the token (e.g. "MYF").
     * @param mToken                The address of an M Token.
     * @param yieldFeeRate          The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient     The address of the recipient of the yield fee.
     * @param admin                 The address administrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager       The address managing the fee rate and recipient.
     * @param claimRecipientManager The address managing claim recipients for accounts.
     */
    function initialize(
        string memory name,
        string memory symbol,
        address mToken,
        uint16 yieldFeeRate,
        address yieldFeeRecipient,
        address admin,
        address yieldFeeManager,
        address claimRecipientManager
    ) public virtual initializer {
        __MYieldFeeExtension_init(
            name,
            symbol,
            mToken,
            yieldFeeRate,
            yieldFeeRecipient,
            admin,
            yieldFeeManager,
            claimRecipientManager
        );
    }

    /* ============ Internal View/Pure Functions ============ */

    /// @dev Returns the current block timestamp.
    function _currentBlockTimestamp() internal view override returns (uint40) {
        return uint40(block.timestamp);
    }

    /// @dev Returns the current earner rate.
    function _currentEarnerRate() internal view override returns (uint32) {
        // NOTE: The behavior of M is known, so we can safely retrieve the earner rate.
        return IMTokenLike(mToken()).earnerRate();
    }
}
