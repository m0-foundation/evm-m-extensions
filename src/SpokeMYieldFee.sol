// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import { MYieldFeeExtension } from "./abstract/MYieldFeeExtension.sol";

import { IContinuousIndexing } from "./interfaces/IContinuousIndexing.sol";
import { IRateOracle } from "./interfaces/IRateOracle.sol";
import { ISpokeMYieldFee } from "./interfaces/ISpokeMYieldFee.sol";

/**
 * @title  ERC20 Token contract for wrapping M into a non-rebasing token.
 *         Extended to take a fee from the yield generated by M.
 * @dev    All holders of this ERC20 token are earners.
 * @dev    This M extension must only be deployed on Spoke chains.
 *         Check MYieldFee for the Mainnet version.
 * @author M0 Labs
 */
contract SpokeMYieldFee is MYieldFeeExtension, ISpokeMYieldFee {
    /* ============ Variables ============ */

    /// @inheritdoc ISpokeMYieldFee
    address public rateOracle;

    /* ============ Constructor ============ */

    /**
     * @dev   Constructs the M Yield Fee token.
     * @param name              The name of the token (e.g. "M Yield Fee").
     * @param symbol            The symbol of the token (e.g. "MYF").
     * @param mToken            The address of a Spoke M Token.
     * @param yieldFeeRate      The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient The address of the recipient of the yield fee.
     * @param admin             The address administrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager   The address managing the fee rate and recipient.
     * @param rateOracle_       The address of a rate oracle.
     */
    constructor(
        string memory name,
        string memory symbol,
        address mToken,
        uint16 yieldFeeRate,
        address yieldFeeRecipient,
        address admin,
        address yieldFeeManager,
        address rateOracle_
    ) MYieldFeeExtension(name, symbol, mToken, yieldFeeRate, yieldFeeRecipient, admin, yieldFeeManager) {
        if ((rateOracle = rateOracle_) == address(0)) revert ZeroRateOracle();
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Returns the current block timestamp.
     * @dev    Uses `latestUpdateTimestamp` from Spoke M to cap `currentIndex` to the timestamp
     *         when Spoke M's index was last updated and thus avoid overprinting M extension tokens.
     * @return The current block timestamp.
     */
    function _currentBlockTimestamp() internal view override returns (uint40) {
        return IContinuousIndexing(mToken).latestUpdateTimestamp();
    }

    /// @dev Returns the current earner rate.
    function _currentEarnerRate() internal view override returns (uint32) {
        // NOTE: The behavior of Rate Oracle is known, so we can safely retrieve the earner rate.
        return IRateOracle(rateOracle).earnerRate();
    }
}
