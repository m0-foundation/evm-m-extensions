// SPDX-License-Identifier: BUSL-1.1

pragma solidity 0.8.26;

import { MYieldFeeExtension } from "./abstract/MYieldFeeExtension.sol";

import { IContinuousIndexing } from "./interfaces/IContinuousIndexing.sol";
import { IRateOracle } from "./interfaces/IRateOracle.sol";
import { ISpokeMYieldFee } from "./interfaces/ISpokeMYieldFee.sol";

abstract contract SpokeMYieldFeeStorageLayout {
    /// @custom:storage-location erc7201:M0.storage.SpokeMYieldFee
    struct SpokeMYieldFeeStorageStruct {
        address rateOracle;
    }

    // keccak256(abi.encode(uint256(keccak256("M0.storage.SpokeMYieldFee")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 private constant _SPOKE_M_YIELD_FEE_STORAGE_LOCATION =
        0x54c2296372ea14358c5df284dc1e6496c510aae813d2d8682287e15e2b8a6900;

    function _getSpokeMYieldFeeStorageLocation() internal pure returns (SpokeMYieldFeeStorageStruct storage $) {
        assembly {
            $.slot := _SPOKE_M_YIELD_FEE_STORAGE_LOCATION
        }
    }
}

/**
 * @title  SpokeMYieldFee
 * @notice Upgradeable ERC20 Token contract for wrapping M into a non-rebasing token.
 *         Extended to take a fee from the yield generated by M.
 * @dev    All holders of this ERC20 token are earners.
 * @dev    This M extension must only be deployed on Spoke chains.
 *         Check MYieldFee for the Mainnet version.
 * @author M0 Labs
 */
contract SpokeMYieldFee is ISpokeMYieldFee, SpokeMYieldFeeStorageLayout, MYieldFeeExtension {
    /* ============ Initializer ============ */

    /**
     * @dev   Initializes the Spoke M Yield Fee token.
     * @param name                  The name of the token (e.g. "M Yield Fee").
     * @param symbol                The symbol of the token (e.g. "MYF").
     * @param mToken                The address of a Spoke M Token.
     * @param swapFacility          The address of the Swap Facility.
     * @param yieldFeeRate          The fee rate, in bps, that will be taken from the yield generated by M.
     * @param yieldFeeRecipient     The address of the recipient of the yield fee.
     * @param admin                 The address administrating the M extension. Can grant and revoke roles.
     * @param yieldFeeManager       The address managing the fee rate and recipient.
     * @param claimRecipientManager The address managing claim recipients for accounts.
     * @param rateOracle_           The address of a rate oracle.

     */
    function initialize(
        string memory name,
        string memory symbol,
        address mToken,
        address swapFacility,
        uint16 yieldFeeRate,
        address yieldFeeRecipient,
        address admin,
        address yieldFeeManager,
        address claimRecipientManager,
        address rateOracle_
    ) public virtual initializer {
        if ((_getSpokeMYieldFeeStorageLocation().rateOracle = rateOracle_) == address(0)) revert ZeroRateOracle();

        __MYieldFeeExtension_init(
            name,
            symbol,
            mToken,
            swapFacility,
            yieldFeeRate,
            yieldFeeRecipient,
            admin,
            yieldFeeManager,
            claimRecipientManager
        );
    }

    /* ============ View/Pure Functions ============ */

    /// @inheritdoc ISpokeMYieldFee
    function rateOracle() public view returns (address) {
        return _getSpokeMYieldFeeStorageLocation().rateOracle;
    }

    /* ============ Internal View/Pure Functions ============ */

    /**
     * @dev    Returns the current block timestamp.
     * @dev    Uses `latestUpdateTimestamp` from Spoke M to cap `currentIndex` to the timestamp
     *         when Spoke M's index was last updated and thus avoid overprinting M extension tokens.
     * @return The current block timestamp.
     */
    function _currentBlockTimestamp() internal view override returns (uint40) {
        return IContinuousIndexing(mToken()).latestUpdateTimestamp();
    }

    /// @dev Returns the current earner rate.
    function _currentEarnerRate() internal view override returns (uint32) {
        // NOTE: The behavior of Rate Oracle is known, so we can safely retrieve the earner rate.
        return IRateOracle(rateOracle()).earnerRate();
    }
}
